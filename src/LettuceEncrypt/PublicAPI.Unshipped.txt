#nullable enable
LettuceEncrypt.IAcmeCertificateLoader
LettuceEncrypt.IAcmeCertificateLoader.IsRunning.get -> bool
LettuceEncrypt.IAdditionalIssuersSource
LettuceEncrypt.IAdditionalIssuersSource.GetAdditionalIssuersAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.Security.Cryptography.X509Certificates.X509Certificate2!>!>!
LettuceEncrypt.IDomainCert
LettuceEncrypt.IDomainCert.Domains.get -> System.Collections.Generic.ISet<string!>!
LettuceEncrypt.IDomainLoader
LettuceEncrypt.IDomainLoader.GetDomainCertsAsync(System.Threading.CancellationToken cancellationToken, System.Collections.Generic.IEnumerable<string!>! domainNames, bool refreshCache = false) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LettuceEncrypt.IDomainCert!>!>!
LettuceEncrypt.IDomainSource
LettuceEncrypt.IDomainSource.GetDomains(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LettuceEncrypt.IDomainCert!>!>!
LettuceEncrypt.IRuntimeCertificateStore.AddCertWithDomainNameAsync(string! domainName, System.Security.Cryptography.X509Certificates.X509Certificate2! certificate) -> System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2!>!
LettuceEncrypt.IRuntimeCertificateStore.AddChallengeCertWithDomainNameAsync(string! domainName, System.Security.Cryptography.X509Certificates.X509Certificate2! certificate) -> System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2!>!
LettuceEncrypt.IRuntimeCertificateStore.AnyChallengeCertAsync() -> System.Threading.Tasks.Task<bool>!
LettuceEncrypt.IRuntimeCertificateStore.ContainsCertForDomainAsync(string! domainName) -> System.Threading.Tasks.Task<bool>!
LettuceEncrypt.IRuntimeCertificateStore.GetAllCertDomainsAsync() -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<string!>!>!
LettuceEncrypt.IRuntimeCertificateStore.GetCertAsync(string! domainName) -> System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2?>!
LettuceEncrypt.IRuntimeCertificateStore.GetChallengeCertAsync(string! domainName) -> System.Threading.Tasks.Task<System.Security.Cryptography.X509Certificates.X509Certificate2?>!
LettuceEncrypt.IRuntimeCertificateStore.RemoveCertAsync(string! domainName) -> System.Threading.Tasks.Task<bool>!
LettuceEncrypt.IRuntimeCertificateStore.RemoveChallengeCertAsync(string! domainName) -> System.Threading.Tasks.Task<bool>!
LettuceEncrypt.MultipleDomainCert
LettuceEncrypt.MultipleDomainCert.Domains.get -> System.Collections.Generic.ISet<string!>!
LettuceEncrypt.MultipleDomainCert.MultipleDomainCert() -> void
LettuceEncrypt.MultipleDomainCert.OrderedDomains.get -> System.Collections.Generic.HashSet<string!>!
LettuceEncrypt.MultipleDomainCert.OrderedDomains.set -> void
LettuceEncrypt.SingleDomainCert
LettuceEncrypt.SingleDomainCert.Domain.get -> string!
LettuceEncrypt.SingleDomainCert.Domain.set -> void
LettuceEncrypt.SingleDomainCert.Domains.get -> System.Collections.Generic.ISet<string!>!
LettuceEncrypt.SingleDomainCert.SingleDomainCert() -> void
LettuceEncrypt.IHttpChallengeResponseStore
LettuceEncrypt.IHttpChallengeResponseStore.AddChallengeResponse(string! token, string! response) -> void
LettuceEncrypt.IHttpChallengeResponseStore.TryGetResponse(string! token, out string? value) -> bool
LettuceEncrypt.IRuntimeCertificateStore
static Microsoft.AspNetCore.Hosting.LettuceEncryptKestrelHttpsOptionsExtensions.UseLettuceEncrypt(this Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions! listenOptions, System.IServiceProvider! applicationServices) -> Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions!
static Microsoft.Extensions.DependencyInjection.LettuceEncryptServiceCollectionExtensions.AddLettuceEncryptAcmeService(this LettuceEncrypt.ILettuceEncryptServiceBuilder! builder) -> LettuceEncrypt.ILettuceEncryptServiceBuilder!
